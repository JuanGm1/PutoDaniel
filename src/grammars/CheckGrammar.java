/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package grammars;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author danielescobar
 */
public class CheckGrammar extends javax.swing.JFrame {

    Grammar grammar = new Grammar();
    Stack<Object> stack = new Stack<>();
    private List<Terminal> terminals = new ArrayList<>();
    private List<NonTerminal> nonTerminals = new ArrayList<>();

    /**
     * Creates new form CheckGrammar
     */
    public CheckGrammar() {
        initComponents();
        if(grammar.isS()) this.grammarType.setText("S");
        if(grammar.isQ()) this.grammarType.setText("Q");
        if(grammar.isLL1()) this.grammarType.setText("LL1");
        this.setResizable(false);
        this.table.setEnabled(false);
        this.table.getTableHeader().setResizingAllowed(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        userString = new javax.swing.JTextField();
        checkLabel = new javax.swing.JLabel();
        check = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        status = new javax.swing.JLabel();
        grammarType = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("String to recognize:");

        checkLabel.setFont(new java.awt.Font("Monaco", 3, 36)); // NOI18N
        checkLabel.setText("GRAMMAR RECOGNITION");

        check.setFont(new java.awt.Font("Monaco", 3, 14)); // NOI18N
        check.setText("CHECK");

        jLabel2.setFont(new java.awt.Font("Monaco", 3, 24)); // NOI18N
        jLabel2.setText("The string you check:");

        jLabel3.setFont(new java.awt.Font("Monaco", 3, 24)); // NOI18N
        jLabel3.setText("The grammar is:");

        status.setFont(new java.awt.Font("Monaco", 3, 24)); // NOI18N
        status.setText("is Correct");

        grammarType.setFont(new java.awt.Font("Monaco", 3, 24)); // NOI18N
        grammarType.setText("ll1");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(status))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(grammarType)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(userString, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(check, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(checkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(77, 77, 77))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(checkLabel)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(userString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(check)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(grammarType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(status))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method let us set the grammar to be evaluated
     *
     * @param grammar The grammar to be used
     */
    public void setGrammar(Grammar grammar) {
        this.grammar = grammar;
        this.terminals = grammar.getTerminals();
        this.nonTerminals = grammar.getLeftSiders();
        this.stack.push(grammar.getProductions().get(0).getLeftSide());
        fillTableBasics();
    }

    /**
     * This method let us fill the table with the right elements
     */
    public void fillTableBasics() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addColumn("In Stack");
        TableColumnModel n = table.getColumnModel();
        
        for (int i = 0; i < this.terminals.size(); i++) {
            // CON ESTA AÃ‘ADIMOS EL RESTO DE COLUMNAS
            model.addColumn(terminals.get(i).toString());
        }
        //CREAMOS VECTOR PARA LLENAR TABLA VACIA
        String[] x = new String[terminals.size() + 1];
        int rows = grammar.terminalsInAlpha().size() + grammar.getLeftSiders().size();
        for (int i = 0; i <= rows; i++) {
            model.addRow(x);
        }
        int j=0;
        for (int i = 0; i < rows; i++) {
            if (i < grammar.getLeftSiders().size()) {
                model.setValueAt(grammar.getLeftSiders().get(i).toString(), i, 0);
            } else {
                model.setValueAt(grammar.terminalsInAlpha().get(j).toString(), i, 0);
                j++;
            }
        }
        
        //model.setValueAt("#1", 1, 1);
        
        List<Production> productions = new ArrayList<>();
        productions = grammar.getProductions();
        Recognizer a =  new Recognizer(grammar);
        List<Terminal> terminals = new ArrayList<>();
        
        terminals = a.getSelectionProduction().get(0);
        
        //SE LLENA LA TABLA CON LAS OPERACIONES CORRESPONDIENTES
        
        /*
        int k = 1;
        String a = #+k;
        int n = grammar.getProductions().size();
        int i = 0;
        int row = 1;
        Hasmap seleccion
        currentN = grammar.getLeftSiders().get(i).toString();
        while(i<n){
            
            
            v[] = seleccion[i]
            for(int j=0;j<v.leng;j++){
            int indexOfColumn = returnColumn(model,v[j]) 
            
            model.setValueAt(a,row,indexOfColumn)
            if(!grammar.getLeftSiders().get(i+1).toString.equals(currentN))row++;                 
            }
            
            a = a.lenght-1;
            a = a+(k+1)
            i++;
           
            System.out.println(grammar.getLeftSiders().get(i).toString());
            System.out.println(productions.get(i).rightSide);
        }
        */
        
        model.setValueAt("â–¼", rows, 0);
        
        
        
    }
    
    
    public int returnColunm(DefaultTableModel model, String terminal){
        
        for(int i=0;i < model.getColumnCount();i++){
            if(model.getColumnName(i).equals(terminal)) return i;
        }   
    return 0;
    }

    public void isCorrect(){
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckGrammar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckGrammar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckGrammar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckGrammar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckGrammar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton check;
    private javax.swing.JLabel checkLabel;
    private javax.swing.JLabel grammarType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel status;
    private javax.swing.JTable table;
    private javax.swing.JTextField userString;
    // End of variables declaration//GEN-END:variables
}
